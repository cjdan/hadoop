1.消息队列（Message Queue）
    消息队列亦称报文队列，也叫做信箱。是Linux的一种通信机制，这种通信机制传递的数据具有某种结构，而不是简单的字节流。
    消息队列的本质其实是一个内核提供的链表，内核基于这个链表，实现了一个数据结构
    向消息队列中写数据，实际上是向这个数据结构中插入一个新结点；从消息队列汇总读数据，实际上是从这个数据结构中删除一个结点
    消息队列提供了一个从一个进程向另外一个进程发送一块数据的方法
    消息队列也有管道一样的不足，就是每个数据块的最大长度是有上限的，系统上全体队列的最大总长度也有一个上限
2.消息队列的模式
    2.1 点对点模式
        消息生产者生产消息发送到Queue中，然后消息消费者从Queue中取出并且消费消息。
        消息被消费以后，Queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。Queue支持存在多个消费者，但是对一个消息而言，
        只会有一个消费者可以消费。
    2.2 发布/订阅模式
        消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到topic的消息会被所有订阅者消费。
3.kafka定义
    Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统。
4.kafka机构
    参照kafka架构图所示。
    Producer：消息生产者，就是向kafka broker发消息的客户端；
    Consumer：消息消费者，向kafka broker取消息的客户端；
    Consumer Group（CG）：消费者组，由多个consumer组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个消费者消费；
        消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。
    Broker：一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic；
    Topic ：可以理解为一个队列，生产者和消费者面向的都是一个topic；
    Partition：为了实现扩展性，一个非常大的topic可以分布到多个broker（即服务器）上，一个topic可以分为多个partition，
        每个partition是一个有序的队列；
    Replica：副本，为保证集群中的某个节点发生故障时，该节点上的partition数据不丢失，且kafka仍然能够继续工作，kafka提供了副本机制，
        一个topic的每个分区都有若干个副本，一个leader和若干个follower；
    leader：每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是leader；
    follower：每个分区多个副本中的“从”，实时从leader中同步数据，保持和leader数据的同步。leader发生故障时，某个follower会成为新的leader。
5.Kafka工作流程及文件存储机制
    5.1 Kafka工作流程
        Kafka工作流程参考kafka工作流程.png。
        Kafka中消息是以topic进行分类的，生产者生产消息，消费者消费消息，都是面向topic的。
        topic是逻辑上的概念，而partition是物理上的概念，每个partition对应于一个log文件，该log文件中存储的就是producer生产的数据。
        Producer生产的数据会被不断追加到该log文件末端，且每条数据都有自己的offset。消费者组中的每个消费者，都会实时记录自己消费到了哪个offset，
        以便出错恢复时，从上次的位置继续消费。
    5.2 Kafka文件存储机制
        Kafka文件存储机制参考kafka文件存储机制.png。
        由于生产者生产的消息会不断追加到log文件末尾，为防止log文件过大导致数据定位效率低下，Kafka采取了分片和索引机制，将每个partition分为多个。
        每个segment对应两个文件——“.index”文件和“.log”文件。这些文件位于一个文件夹下，该文件夹的命名规则为：topic名称+分区序号。
        例如，first这个topic有三个分区，则其对应的文件夹为first-0,first-1,first-2。
        index和log文件以当前segment的第一条消息的offset命名。index文件和log文件的结构示意图参考index文件和log文件的结构示意图.png。
        .index”文件存储大量的索引信息，“.log”文件存储大量的数据，索引文件中的元数据指向对应数据文件中message的物理偏移地址。
6.Kafka生产者
    6.1 分区策略
        1）分区的原因
            （1）方便在集群中扩展，每个Partition可以通过调整以适应它所在的机器，而一个topic又可以有多个Partition组成，
                因此整个集群就可以适应任意大小的数据了；
            （2）可以提高并发，因为可以以Partition为单位读写了。
        2）分区的原则
            需要将producer发送的数据封装成一个ProducerRecord对象，如图ProducerRecord图例.png。
            （1）指明partition的情况下，直接将指明的值直接作为partiton值；
            （2）没有指明partition值但有 key 的情况下，将 key 的 hash 值与topic的partition数进行取余得到 partition 值；
            （3）既没有partition值又没有 key 值的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），
                将这个值与topic可用的partition总数取余得到partition值，也就是常说的 round-robin 算法。
    6.2 数据可靠性保证
        保证producer发送的数据，能可靠的发送到指定的topic，topic的每个partition收到producer发送的数据后，
        都需要向producer发送ack（acknowledgement确认收到），如果producer收到ack，就会进行下一轮的发送，
        否则重新发送数据，流程参考数据发送示意图.png。
        1）副本数据同步策略
            1.半数以上完成同步，就发送ack
                优点：延迟低
                缺点：选举新的leader时，容忍n台节点的故障，需要2n+1个副本
            2.全部完成同步，才发送ack
                优点：选举新的leader时，容忍n台节点的故障，需要n+1个副本
                缺点：延迟高
            Kafka选择了第二种方案，原因如下：
            （1）同样为了容忍n台节点的故障，第一种方案需要2n+1个副本，而第二种方案只需要n+1个副本，而Kafka的每个分区都有大量的数据
                ，第一种方案会造成大量数据的冗余。
            （2）虽然第二种方案的网络延迟会比较高，但网络延迟对Kafka的影响较小。
        2）ISR
            问题：leader收到数据，所有follower都开始同步数据，但有一个follower，因为某种故障，迟迟不能与leader进行同步，
                那leader就要一直等下去，直到它完成同步，才能发送ack，这个问题怎么解决呢？
            Leader维护了一个动态的in-sync replica set (ISR)，意为和leader保持同步的follower集合。
            当ISR中的follower完成数据的同步之后，leader就会给producer发送ack。如果follower长时间未向leader同步数据，
            则该follower将被踢出ISR，该时间阈值由replica.lag.time.max.ms参数设定。Leader发生故障之后，就会从ISR中选举新的leader。
        3）ack应答机制
            对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失，所以没必要等ISR中的follower全部接收成功。
            所以Kafka为用户提供了三种可靠性级别，用户根据对可靠性和延迟的要求进行权衡，选择以下的配置。
            acks参数配置：
            acks：
            0：producer不等待broker的ack，这一操作提供了一个最低的延迟，broker一接收到还没有写入磁盘就已经返回，
                当broker故障时有可能丢失数据,参考acks=1数据丢失.png；
            1：producer等待broker的ack，partition的leader落盘成功后返回ack，如果在follower同步成功之前leader故障，那么将会丢失数据；
            -1（all）：producer等待broker的ack，partition的leader和follower全部落盘成功后才返回ack。但是如果在follower同步完成后，
                broker发送ack之前，leader发生故障，那么会造成数据重复,参考acks=-1数据重复.png。
        4）故障处理细节
            LEO：Log End Offset
            HW:High Watermark
            参照HW与LEO解释.png
            （1）follower故障
                follower发生故障后会被临时踢出ISR，待该follower恢复后，follower会读取本地磁盘记录的上次的HW，
                并将log文件高于HW的部分截取掉，从HW开始向leader进行同步。等该follower的LEO大于等于该Partition的HW，
                即follower追上leader之后，就可以重新加入ISR了。
            （2）leader故障
                leader发生故障之后，会从ISR中选出一个新的leader，之后，为保证多个副本之间的数据一致性，
                其余的follower会先将各自的log文件高于HW的部分截掉，然后从新的leader同步数据。
            注意：这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复。
    6.3 Exactly Once语义
        将服务器的ACK级别设置为-1，可以保证Producer到Server之间不会丢失数据，即At Least Once语义。相对的，将服务器ACK级别设置为0，
        可以保证生产者每条消息只会被发送一次，即At Most Once语义。
        At Least Once可以保证数据不丢失，但是不能保证数据不重复；相对的，At Most Once可以保证数据不重复，但是不能保证数据不丢失。
        但是，对于一些非常重要的信息，比如说交易数据，下游数据消费者要求数据既不重复也不丢失，即Exactly Once语义。
        在0.11版本以前的Kafka，对此是无能为力的，只能保证数据不丢失，再在下游消费者对数据做全局去重。
        对于多个下游应用的情况，每个都需要单独做全局去重，这就对性能造成了很大影响。
        0.11版本的Kafka，引入了一项重大特性：幂等性。所谓的幂等性就是指Producer不论向Server发送多少次重复数据，Server端都只会持久化一条。
        幂等性结合At Least Once语义，就构成了Kafka的Exactly Once语义。即：
        At Least Once + 幂等性 = Exactly Once
        要启用幂等性，只需要将Producer的参数中enable.idompotence设置为true即可。
        Kafka的幂等性实现其实就是将原来下游需要做的去重放在了数据上游。
        开启幂等性的Producer在初始化的时候会被分配一个PID，发往同一Partition的消息会附带Sequence Number。
        而Broker端会对<PID, Partition, SeqNumber>做缓存，当具有相同主键的消息提交时，Broker只会持久化一条。
        但是PID重启就会变化，同时不同的Partition也具有不同主键，所以幂等性无法保证跨分区跨会话的Exactly Once。
7.Kafka消费者
    7.1 消费方式
        consumer采用pull（拉）模式从broker中读取数据。
        push（推）模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的。它的目标是尽可能以最快速度传递消息，
            但是这样很容易造成consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。
            而pull模式则可以根据consumer的消费能力以适当的速率消费消息。
        pull模式不足之处是，如果kafka没有数据，消费者可能会陷入循环中，一直返回空数据。
            针对这一点，Kafka的消费者在消费数据时会传入一个时长参数timeout，
            如果当前没有数据可供消费，consumer会等待一段时间之后再返回，这段时长即为timeout。
    7.2 分区分配策略
        一个consumer group中有多个consumer，一个 topic有多个partition，所以必然会涉及到partition的分配问题，
        即确定那个partition由哪个consumer来消费。
        Kafka有两种分配策略，一是roundrobin，一是range。
        1）RoundRobinAssignor分配策略(轮询分区)
            RoundRobin 轮询分区策略，是把所有的partition和所有的consumer都列出来，然后按照hascode进行排序，
            最后通过轮询算法来分配 partition 给到各个消费者。
            轮询分区分为如下两种情况：①同一消费组内所有消费者订阅的消息都是相同的 ②同一消费者组内的消费者锁定月的消息不相同
            ①如果同一消费组内，所有的消费者订阅的消息都是相同的，那么 RoundRobin 策略的分区分配会是均匀的。
            ②如果同一消费者组内，所订阅的消息是不相同的，那么在执行分区分配的时候，就不是完全的轮询分配，
                有可能会导致分区分配的不均匀。如果某个消费者没有订阅消费组内的某个topic，那么在分配分区的时候，
                此消费者将不会分配到这个 topic 的任何分区。
            弊端：要使用RoundRobin 轮询分区策略，必须满足如下两个条件：
               ①每个消费者订阅的主题，必须是相同的
               ②每个主题的消费者实例都是相同的。(即：上面的第一种情况，才优先使用RoundRobin轮询分区策略)
        2)RangeAssignor分配策略(范围分区)
            Range范围分区策略是对每个topic而言的。首先对同一个topic里面的分区按照序号进行排序，并对消费者按照字母顺序进行排序。
            通过 partitions数/consumer数 来决定每个消费者应该消费几个分区。如果除不尽，那么前面几个消费者将会多消费 1 个分区。
            弊端：如果有N多个 topic，那么针对每个topic，第一个区域的消费者都将多消费1个分区，topic越多，第一个区域消费的分区会
            比其他消费者明显多消费N个分区。这就是Range范围分区的一个很明显的弊端。
    7.3 offset的维护
        由于consumer在消费过程中可能会出现断电宕机等故障，consumer恢复后，需要从故障前的位置的继续消费，
            所以consumer需要实时记录自己消费到了哪个offset，以便故障恢复后继续消费。
        Kafka 0.9版本之前，consumer默认将offset保存在Zookeeper中，从0.9版本开始，consumer默认将offset保存在Kafka一个内置的topic中，
            该topic为__consumer_offsets。
8.Kafka高效读写数据
    8.1 顺序写磁盘
       Kafka的producer生产数据，要写入到log文件中，写的过程是一直追加到文件末端，为顺序写。官网有数据表明，同样的磁盘，顺序写能到到600M/s，
       而随机写只有100k/s。这与磁盘的机械机构有关，顺序写之所以快，是因为其省去了大量磁头寻址的时间。
    8.2 应用Pagecache
        Kafka数据持久化是直接持久化到Pagecache中，这样会产生以下几个好处：
        1.I/O Scheduler 会将连续的小块写组装成大块的物理写从而提高性能
        2.I/O Scheduler 会尝试将一些写操作重新按顺序排好，从而减少磁盘头的移动时间
        3.充分利用所有空闲内存（非JVM内存）。如果使用应用层Cache（即JVM堆内存），会增加GC负担
        4.读操作可直接在Page Cache内进行。如果消费和生产速度相当，甚至不需要通过物理磁盘（直接通过 Page Cache）交换数据
        5.如果进程重启，JVM内的Cache会失效，但Page Cache仍然可用
        尽管持久化到Pagecache上可能会造成宕机丢失数据的情况，但这可以被Kafka的Replication机制解决。
        如果为了保证这种情况下数据不丢失而强制将Page Cache中的数据Flush到磁盘，反而会降低性能。
    8.3 零拷贝技术
        传统的读取文件数据并发送到网络的步骤如下，参照网络传输数据.png：
            （1）操作系统将数据从磁盘文件中读取到内核空间的页面缓存；
            （2）应用程序将数据从内核空间读入用户空间缓冲区；
            （3）应用程序将读到数据写回内核空间并放入socket缓冲区；
            （4）操作系统将数据从socket缓冲区复制到网卡接口，此时数据才能通过网络发送。
        通常情况下，Kafka的消息会有多个订阅者，生产者发布的消息会被不同的消费者多次消费，
        为了优化这个流程，Kafka使用了“零拷贝技术”，如零拷贝传输数据.png所示：
        “零拷贝技术”只用将磁盘文件的数据复制到页面缓存中一次，然后将数据从页面缓存直接发送到网络中（发送给不同的订阅者时，
        都可以使用同一个页面缓存），避免了重复复制操作。
        如果有10个消费者，传统方式下，数据复制次数为4*10=40次，而使用“零拷贝技术”只需要1+10=11次，
        一次为从磁盘复制到页面缓存，10次表示10个消费者各自读取一次页面缓存。
9.Zookeeper在Kafka中的作用
    Kafka集群中有一个broker会被选举为Controller，负责管理集群broker的上下线，所有topic的分区副本分配和leader选举等工作。
    Controller的管理工作都是依赖于Zookeeper的，流程参考leader选举流程。
10.Kafka事务
    Kafka从0.11版本开始引入了事务支持。事务可以保证Kafka在Exactly Once语义的基础上，
    生产和消费可以跨分区和会话，要么全部成功，要么全部失败。
    10.1  Producer事务
        了实现跨分区跨会话的事务，需要引入一个全局唯一的Transaction ID，并将Producer获得的PID和Transaction ID绑定。
        这样当Producer重启后就可以通过正在进行的Transaction ID获得原来的PID。
        为了管理Transaction，Kafka引入了一个新的组件Transaction Coordinator。
        Producer就是通过和Transaction Coordinator交互获得Transaction ID对应的任务状态。
        Transaction Coordinator还负责将事务所有写入Kafka的一个内部Topic，这样即使整个服务重启，
        由于事务状态得到保存，进行中的事务状态可以得到恢复，从而继续进行。
    10.2 Consumer事务（精准一次性消费）
         上述事务机制主要是从Producer方面考虑，对于Consumer而言，事务的保证就会相对较弱，尤其时无法保证Commit的信息被精确消费。
         这是由于Consumer可以通过offset访问任意信息，而且不同的Segment File生命周期不同，同一事务的消息可能会出现重启后被删除的情况。
         如果想完成Consumer端的精准一次性消费，那么需要kafka消费端将消费过程和提交offset过程做原子绑定。
11.消息发送流程
    Kafka的Producer发送消息采用的是异步发送的方式。在消息发送的过程中，涉及到了两个线程——main线程和Sender线程，
    以及一个线程共享变量——RecordAccumulator。main线程将消息发送给RecordAccumulator，Sender线程不断从
    RecordAccumulator中拉取消息发送到Kafka broker，参照消息发送流程.png。
    相关参数：
    batch.size：只有数据积累到batch.size之后，sender才会发送数据。
    linger.ms：如果数据迟迟未达到batch.size，sender等待linger.time之后就会发送数据。





